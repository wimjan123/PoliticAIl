# Political Desktop OS Simulation - Development Environment
# Docker Compose configuration for local development with Redis and MongoDB
version: '3.8'

services:
  # Redis - LLM job queues and caching
  redis:
    image: redis:7-alpine
    container_name: politicai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - politicai_network

  # MongoDB - Political entity storage and game state
  mongodb:
    image: mongo:7
    container_name: politicai_mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-politicai_dev_2025}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-politicai}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/mongo-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    networks:
      - politicai_network

  # MongoDB Express - Database management UI (development only)
  mongo_express:
    image: mongo-express:1.0.0-alpha
    container_name: politicai_mongo_express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-politicai_dev_2025}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-politicai_dev_2025}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME:-dev}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-politicai123}
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - politicai_network
    profiles:
      - dev-tools

  # Redis Commander - Redis management UI (development only)
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: politicai_redis_commander
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USERNAME:-dev}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-politicai123}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - politicai_network
    profiles:
      - dev-tools

  # Elasticsearch - Full-text search for political content (optional)
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: politicai_elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - cluster.name=politicai-cluster
      - node.name=politicai-node-1
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - politicai_network
    profiles:
      - search

  # Kibana - Elasticsearch management UI (optional)
  kibana:
    image: kibana:8.11.0
    container_name: politicai_kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=politicai-kibana
      - SERVER_HOST=0.0.0.0
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - politicai_network
    profiles:
      - search

# Named volumes for data persistence
volumes:
  redis_data:
    driver: local
    name: politicai_redis_data
  mongodb_data:
    driver: local
    name: politicai_mongodb_data
  mongodb_config:
    driver: local
    name: politicai_mongodb_config
  elasticsearch_data:
    driver: local
    name: politicai_elasticsearch_data

# Custom network for service communication
networks:
  politicai_network:
    driver: bridge
    name: politicai_network