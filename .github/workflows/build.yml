name: Build & Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Cross-Platform Builds
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'linux'
            os: 'ubuntu-20.04'
            rust_target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
            build_script: 'npm run tauri build'
            bundle_path: 'src-tauri/target/release/bundle'
            artifact_name: 'politicai-linux-x64'
            artifact_path: 'src-tauri/target/release/bundle/appimage/*.AppImage'

          - platform: 'windows'
            os: 'windows-latest'
            rust_target: 'x86_64-pc-windows-msvc'
            arch: 'x64'
            build_script: 'npm run tauri build'
            bundle_path: 'src-tauri/target/release/bundle'
            artifact_name: 'politicai-windows-x64'
            artifact_path: 'src-tauri/target/release/bundle/msi/*.msi'

          - platform: 'macos'
            os: 'macos-latest'
            rust_target: 'x86_64-apple-darwin'
            arch: 'x64'
            build_script: 'npm run tauri build'
            bundle_path: 'src-tauri/target/release/bundle'
            artifact_name: 'politicai-macos-x64'
            artifact_path: 'src-tauri/target/release/bundle/dmg/*.dmg'

          - platform: 'macos'
            os: 'macos-latest'
            rust_target: 'aarch64-apple-darwin'
            arch: 'arm64'
            build_script: 'npm run tauri build -- --target aarch64-apple-darwin'
            bundle_path: 'src-tauri/target/aarch64-apple-darwin/release/bundle'
            artifact_name: 'politicai-macos-arm64'
            artifact_path: 'src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      # Platform-specific dependencies
      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libssl-dev \
            libcairo2-dev \
            libgdk-pixbuf2.0-dev \
            libglib2.0-dev \
            libatk1.0-dev \
            libpango1.0-dev \
            libharfbuzz-dev

      - name: Install Windows dependencies
        if: matrix.platform == 'windows'
        run: |
          # Install WebView2 bootstrapper
          Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?LinkId=2124703" -OutFile "MicrosoftEdgeWebview2Setup.exe"
          Start-Process -FilePath "MicrosoftEdgeWebview2Setup.exe" -ArgumentList "/silent" -Wait

      - name: Install macOS dependencies
        if: matrix.platform == 'macos'
        run: |
          # No additional dependencies needed for Tauri macOS builds
          echo "macOS dependencies check complete - using system defaults"

      # Build process
      - name: Verify repository structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo "package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"
          echo "package-lock.json exists: $(test -f package-lock.json && echo 'YES' || echo 'NO')"
          if [ -f package.json ]; then
            echo "package.json content preview:"
            head -10 package.json
          fi

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node.js dependencies
        run: |
          echo "About to run npm installation..."
          echo "Working directory: $(pwd)"
          echo "npm version: $(npm --version)"
          echo "node version: $(node --version)"
          echo "Platform: ${{ matrix.platform }}"

          # Configure npm for better memory handling and timeouts
          npm config set maxsockets 1
          npm config set fetch-timeout 300000
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000

          # Use different strategies for different platforms
          if [ "${{ matrix.platform }}" = "macos" ]; then
            echo "Using macOS-optimized npm installation..."
            # Increase Node.js memory limit and use npm install for macOS
            export NODE_OPTIONS="--max-old-space-size=8192 --no-warnings"
            export npm_config_progress=false
            export npm_config_loglevel=error

            # Clear npm cache to ensure clean state
            npm cache clean --force || true

            # Install dependencies with more aggressive timeout and retry settings
            npm install \
              --no-audit \
              --no-fund \
              --prefer-offline \
              --no-optional \
              --ignore-scripts \
              --maxsockets=1 \
              --timeout=600000 \
              --registry=https://registry.npmjs.org/

            # Run install scripts separately if needed
            echo "Running postinstall scripts..."
            npm rebuild --silent || echo "Warning: Some native modules failed to rebuild"
          else
            echo "Using standard npm ci..."
            npm ci
          fi

      - name: Build frontend
        run: |
          echo "Building frontend for ${{ matrix.platform }}..."
          echo "Current working directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"

          # Ensure we're in the correct working directory
          cd "${{ github.workspace }}" || cd "$(pwd)"
          echo "After cd - Current working directory: $(pwd)"
          echo "After cd - package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"

          if [ "${{ matrix.platform }}" = "macos" ]; then
            export NODE_OPTIONS="--max-old-space-size=8192 --no-warnings"
          fi
          npm run build

      - name: Build Tauri application
        run: |
          echo "Building Tauri application for ${{ matrix.platform }}..."
          echo "Current working directory: $(pwd)"
          echo "package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"
          echo "src-tauri exists: $(test -d src-tauri && echo 'YES' || echo 'NO')"

          # Ensure we're in the correct working directory
          cd "${{ github.workspace }}" || cd "$(pwd)"
          echo "After cd - Current working directory: $(pwd)"
          echo "After cd - package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"

          if [ "${{ matrix.platform }}" = "macos" ]; then
            export NODE_OPTIONS="--max-old-space-size=8192 --no-warnings"
          fi
          ${{ matrix.build_script }}

      # Artifact preparation and upload
      - name: Prepare artifacts (Linux)
        if: matrix.platform == 'linux'
        run: |
          mkdir -p dist/
          cp ${{ matrix.artifact_path }} dist/
          # Also copy the binary for debugging
          cp src-tauri/target/release/politicai dist/politicai-${{ matrix.arch }}
          # Create checksum
          cd dist
          sha256sum * > checksums.txt

      - name: Prepare artifacts (Windows)
        if: matrix.platform == 'windows'
        run: |
          New-Item -ItemType Directory -Force -Path dist
          Copy-Item ${{ matrix.artifact_path }} dist/
          # Also copy the executable
          Copy-Item src-tauri/target/release/politicai.exe dist/politicai-${{ matrix.arch }}.exe
          # Create checksum
          cd dist
          Get-FileHash -Algorithm SHA256 * | Format-Table -AutoSize > checksums.txt

      - name: Prepare artifacts (macOS)
        if: matrix.platform == 'macos'
        run: |
          mkdir -p dist/
          cp ${{ matrix.artifact_path }} dist/
          # Also copy the binary
          cp src-tauri/target/${{ matrix.rust_target }}/release/politicai dist/politicai-${{ matrix.arch }}
          # Create checksum
          cd dist
          shasum -a 256 * > checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            dist/
            !dist/*.txt
          retention-days: 30

      - name: Upload checksums
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-checksums
          path: dist/checksums.txt
          retention-days: 30

      # Performance metrics collection
      - name: Collect build metrics
        run: |
          echo "Build Size Metrics for ${{ matrix.platform }}-${{ matrix.arch }}:" > build-metrics.txt
          echo "=======================================================" >> build-metrics.txt
          if [ "${{ matrix.platform }}" = "windows" ]; then
            powershell -Command "Get-ChildItem dist/ | ForEach-Object { '{0} - {1:N2} MB' -f $_.Name, ($_.Length / 1MB) }" >> build-metrics.txt
          else
            ls -lh dist/ | awk '{print $9 " - " $5}' >> build-metrics.txt
          fi
          echo "" >> build-metrics.txt
          echo "Binary Dependencies:" >> build-metrics.txt
          if [ "${{ matrix.platform }}" = "linux" ]; then
            ldd dist/politicai-${{ matrix.arch }} >> build-metrics.txt 2>/dev/null || echo "No dependencies listed" >> build-metrics.txt
          elif [ "${{ matrix.platform }}" = "macos" ]; then
            otool -L dist/politicai-${{ matrix.arch }} >> build-metrics.txt 2>/dev/null || echo "No dependencies listed" >> build-metrics.txt
          fi

      - name: Upload build metrics
        uses: actions/upload-artifact@v4
        with:
          name: build-metrics-${{ matrix.platform }}-${{ matrix.arch }}
          path: build-metrics.txt
          retention-days: 7

  # Create unified release package
  package:
    name: Package Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.release_type == 'production'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create release package
        run: |
          mkdir -p release/

          # Copy all platform builds
          find artifacts/ -name "*.AppImage" -exec cp {} release/ \;
          find artifacts/ -name "*.msi" -exec cp {} release/ \;
          find artifacts/ -name "*.dmg" -exec cp {} release/ \;

          # Copy binaries
          find artifacts/ -name "politicai-*" -type f -executable -exec cp {} release/ \;
          find artifacts/ -name "politicai-*.exe" -exec cp {} release/ \;

          # Combine checksums
          echo "Political AI Desktop Simulation - Release Checksums" > release/CHECKSUMS.txt
          echo "====================================================" >> release/CHECKSUMS.txt
          echo "" >> release/CHECKSUMS.txt
          find artifacts/ -name "checksums.txt" -exec cat {} \; >> release/CHECKSUMS.txt

          # Create release notes
          echo "# Political AI Desktop Simulation" > release/RELEASE_NOTES.md
          echo "" >> release/RELEASE_NOTES.md
          echo "## Version: ${GITHUB_REF#refs/tags/}" >> release/RELEASE_NOTES.md
          echo "## Build Date: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> release/RELEASE_NOTES.md
          echo "## Commit: ${GITHUB_SHA:0:8}" >> release/RELEASE_NOTES.md
          echo "" >> release/RELEASE_NOTES.md
          echo "### Supported Platforms:" >> release/RELEASE_NOTES.md
          echo "- Linux x64 (.AppImage)" >> release/RELEASE_NOTES.md
          echo "- Windows x64 (.msi)" >> release/RELEASE_NOTES.md
          echo "- macOS x64 (.dmg)" >> release/RELEASE_NOTES.md
          echo "- macOS ARM64 (.dmg)" >> release/RELEASE_NOTES.md
          echo "" >> release/RELEASE_NOTES.md
          echo "### Installation:" >> release/RELEASE_NOTES.md
          echo "1. Download the appropriate file for your platform" >> release/RELEASE_NOTES.md
          echo "2. Follow platform-specific installation instructions" >> release/RELEASE_NOTES.md
          echo "3. See CHECKSUMS.txt to verify file integrity" >> release/RELEASE_NOTES.md

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: politicai-release-package
          path: release/
          retention-days: 90

  # Staging deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.release_type == 'staging'
    environment: staging
    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: politicai-linux-x64
          path: staging/

      - name: Deploy to staging server
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Staging URL: https://staging.politicai.app"
          # Here you would implement actual deployment logic
          # For example, uploading to a staging server, updating a web app, etc.

      - name: Run staging smoke tests
        run: |
          echo "Running basic smoke tests on staging..."
          # Implement smoke tests here
          echo "✅ Staging deployment successful"

  # Production release
  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [package]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Download release package
        uses: actions/download-artifact@v4
        with:
          name: politicai-release-package
          path: release/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/*.AppImage
            release/*.msi
            release/*.dmg
            release/CHECKSUMS.txt
          body_path: release/RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
          token: ${{ secrets.GITHUB_TOKEN }}

  # Notification
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build, package, deploy-staging]
    if: always() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Notify build completion
        run: |
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Build completed successfully for all platforms"
            echo "📦 Artifacts are available for download"

            if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
              echo "🚀 Staging deployment completed"
            fi

            if [[ "${{ needs.package.result }}" == "success" && "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
              echo "🎉 Release package created successfully"
            fi
          else
            echo "❌ Build failed on one or more platforms"
            exit 1
          fi

          # Here you could add notifications to Slack, Discord, email, etc.
          # Example:
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"Political AI Build Status: ${{ needs.build.result }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}